pipeline {
    agent any 

    tools {
        maven 'maven3'
    }

    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }

    stages {
        
        stage("Git Checkout") {
            steps {
                git branch: 'main', url: 'https://github.com/Melbin-k-Biju/Multi-Tier-application.git'
            }
        }
        
        stage("Compile") {
            steps {
                sh "mvn compile"
            }
        }
        
        stage("Test Cases") {
            steps {
                sh "mvn test -DskipTests=true"
            }
        }
        
        stage("Trivy Scan (File System)") {
            steps {
                sh "trivy fs --format table -o fs-report.html ."
            }
        }
        
        stage("SonarQube Analysis") {
            steps {
                withSonarQubeEnv('sonar') {
                    sh '''$SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Multitier \
                        -Dsonar.java.binaries=. \
                        -Dsonar.projectKey=Multitier'''
                }
            }
        }
        
        stage("Build") {
            steps {
                sh "mvn package -DskipTests=true"
            }
        }
        
        stage("Publish to Nexus") {
            steps {
                withMaven(globalMavenSettingsConfig: 'settings-maven', jdk: '', maven: 'maven3', mavenSettingsConfig: '', traceability: true) {
                    sh "mvn deploy -DskipTests=true"
                }
            }
        }

        stage("Docker Build") {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        sh "docker build -t melbin007/bankapp:latest ."
                    }
                }
            }
        }

        stage("Trivy Image Scan") {
            steps {
                sh "trivy image --format table -o fs-report.html melbin007/bankapp:latest"
            }
        }
        
        stage("Docker Push Image") {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        sh "docker push melbin007/bankapp:latest"
                    }
                }
            }
        }
        
        stage("Deploy to Kubernetes") {
            steps {
                withKubeConfig(caCertificate: '', clusterName: 'devopsshack-cluster', contextName: '', 
                               credentialsId: 'K8-token', namespace: 'webapps', restrictKubeConfigAccess: false, 
                               serverUrl: 'https://F018AC99884412B73408FA7597644CD8.yl4.ap-south-1.eks.amazonaws.com') {
                    sh "kubectl apply -f ds.yml -n webapps"
                    sleep 30
                }
            }
        }
        
        stage("Verify Deployment") {
            steps {
                withKubeConfig(caCertificate: '', clusterName: 'devopsshack-cluster', contextName: '', 
                               credentialsId: 'K8-token', namespace: 'webapps', restrictKubeConfigAccess: false, 
                               serverUrl: 'https://F018AC99884412B73408FA7597644CD8.yl4.ap-south-1.eks.amazonaws.com') {
                    sh "kubectl get pods -n webapps"
                    sh "kubectl get svc -n webapps"
                    sleep 30
                }
            }
        }
    }
}
 